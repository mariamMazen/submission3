cleanup:
  docker: null
  steps:
  - run: {command: '# your code here

        export OldWorkflowID="the id here"

        export STACKS=[] #put the list of stacks here

        ', name: Get old stack workflow id}
  - run: {command: "if [[ \"${STACKS[@]}\" =~ \"${OldWorkflowID}\" ]]\nthen\n  # your\
        \ code here\nfi\n", name: Remove old stacks and files}
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow
      ID.
    parameters: null
    steps:
    - run: {command: '# Your code here

          exit 1

          ', name: Destroy environments, when: on_fail}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: null
    steps:
    - run: {command: "# Curl command here to see if there was a successful migration\
          \ associated with the workflow id, store result in SUCCESS variable\nSUCCESS\
          \ = 1\nif(( $SUCCESS==1 )); \nthen\n#  cd ~/project/backend\n#  npm install\n\
          #  Add revert code here. You can find this in the Getting Started section.\n\
          \  exit 1\nfi\n", name: Revert migrations}
jobs:
  build-backend:
    docker:
    - {image: 'circleci/node:13.8.0'}
    steps:
    - checkout
    - restore_cache:
        keys: [backend-build]
    - run: {command: 'npm run build

          exit 1

          ', name: Back-end build}
    - save_cache:
        key: backend-build
        paths: [backend/node_modules]
  build-frontend:
    docker:
    - {image: 'circleci/node:13.8.0'}
    steps:
    - checkout
    - restore_cache:
        keys: [frontend-build]
    - run: {command: 'npm run build

          exit 1

          ', name: Build front-end}
    - save_cache:
        key: frontend-build
        paths: [frontend/node_modules]
  cloudfront-update:
    docker: null
    steps:
    - run: {command: '# your code here

          ', name: Install dependencies}
    - run: {command: '# your code here

          ', name: Update cloudfront distribution}
  configure-infrastructure:
    docker: null
    steps:
    - run: {command: '# Your code here

          exit 1

          ', name: Install dependencies}
    - run: {command: '# Your code here

          exit 1

          ', name: Configure server}
  deploy-backend:
    docker: null
    steps:
    - run: {command: '# your code here

          ', name: Install dependencies}
    - run: {command: '# your code here

          ', name: Deploy backend}
  deploy-frontend:
    docker: null
    steps:
    - run: {command: '# your code here

          ', name: Install dependencies}
    - run: {command: '# your code here

          export API_URL="http://${BACKEND_IP}:3030"

          echo "${API_URL}"

          ', name: Get backend url}
    - run: {command: '# your code here

          ', name: Deploy frontend objects}
  deploy-infrastructure:
    docker: null
    steps:
    - run: {command: "aws cloudformation deploy \\\n  --template-file .circleci/files/backend.yml\
          \ \\\n  #--tags project=your-tag \\\n  # --stack-name \"your back-end stack\
          \ name with workflow id\" \\\n  # --parameter-overrides ID=\"your workflow\
          \ id\"  \n  exit 1\n", name: Ensure back-end infrastructure exists}
    - run: {command: "aws cloudformation deploy \\\n  --template-file .circleci/files/frontend.yml\
          \ \\\n  #--tags project=your-tag \\\n  # --stack-name \"your front-end stack\
          \ name with workflow id\" \\\n  # --parameter-overrides ID=\"your workflow\
          \ id\"  \n  exit 1\n", name: Ensure front-end infrastructure exist}
    - run: {command: '# Your code here

          exit 1

          ', name: Add back-end ip to ansible inventory}
    - persist_to_workspace:
        paths: [project/.circleci/ansible/inventory.txt]
        root: ~/
  run-migrations:
    docker: null
    steps:
    - run: {command: '# Your code here

          exit 1

          ', name: Run migrations}
    - run: {command: '# Your code here

          exit 1

          ', name: Send migration results to memstash}
  scan-backend: {docker: null, steps: null}
  scan-frontend: {docker: null, steps: null}
  smoke-test:
    docker: null
    steps:
    - run: {command: '# your code here

          ', name: Install dependencies}
    - run: {command: '# your code here

          ', name: Get backend url}
    - run: {command: '# your code here

          ', name: Backend smoke test.}
    - run: {command: '# your code here

          ', name: Frontend smoke test.}
  test-backend: {docker: null, steps: null}
  test-frontend: {docker: null, steps: null}
version: 2.1
workflows:
  default:
    jobs:
    - build-frontend
    - build-backend
    - test-frontend:
        requires: [build-frontend]
    - test-backend:
        requires: [build-backend]
    - scan-backend:
        requires: [build-backend]
    - scan-frontend:
        requires: [build-frontend]
    - deploy-infrastructure:
        requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      filters:
        branches:
          only: [test-feature-branch]
    - configure-infrastructure:
        requires: [deploy-infrastructure]
    - run-migrations:
        requires: [configure-infrastructure]
    - deploy-frontend:
        requires: [run-migrations]
    - deploy-backend:
        requires: [run-migrations]
    - smoke-test:
        requires: [deploy-backend, deploy-frontend]
    - cloudfront-update:
        requires: [smoke-test]
    - cleanup:
        requires: [cloudfront-update]
