version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-stack"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-stack"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 3e6d53ae-eeb4-4811-8950-0202595869fd" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( "${SUCCESS}" == "1" )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install --save
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd ~/project/backend
              npm install --save
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
              cd ~/project/frontend
              npm install
              npm test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
              cd ~/project/backend
              npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
              cd ~/project/frontend
              npm install
              npm audit fix 
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
              cd ~/project/backend
              npm audit fix 
              npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
               --stack-name "udapeople-backend-stack" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
               --stack-name "udapeople-frontend-stack" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo -e "[web]\n" > .circleci/ansible/inventory
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6c:2c:6a:ec:9a:da:75:e9:3b:3d:4e:b7:aa:2c:f6:77"
      - attach_workspace:
          at: ~/project/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations >> ~/project/backend/migrations.txt
            MIGRATIONS=$(cat migrations.txt)
            if grep -q "has been executed successfully" migrations.txt; then
              curl -H "Content-Type: text/plain" -H "token: 3e6d53ae-eeb4-4811-8950-0202595869fd" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            curl -H "Content-Type: text/plain" -H "token: 3e6d53ae-eeb4-4811-8950-0202595869fd" --request PUT --data "${BACKEND_IP}" https://api.memstash.io/values/BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd ~/project/frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6c:2c:6a:ec:9a:da:75:e9:3b:3d:4e:b7:aa:2c:f6:77"
      - attach_workspace:
          at: ~/project/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory deploy-backend.yml
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 3e6d53ae-eeb4-4811-8950-0202595869fd" --request GET https://api.memstash.io/values/BACKEND_IP)
            
      - run:
          name: Backend smoke test.
          command: |
            echo "${BACKEND_IP}"
            if curl -sL --fail "http://${BACKEND_IP}:3000/api/status"; then
              echo "Success"
            else
              echo "Fail"
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #    requires: [build-frontend]
      # - test-backend:
      #    requires: [build-backend]
      # - scan-backend:
      #    requires: [build-backend]
      # - scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
